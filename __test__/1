"use strict";

require("jest");

var _db = require("../dev/server/db/db");

var _models = require("../dev/server/model/models");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
// global.Promise = require.requireActual('promise')

var mockdata = {
    "name": "被遗忘的NaFaSh",
    "nums": "973",
    "title": "NaFaSh再看几场海选赛",
    "link": "http://www.panda.tv/309495",
    "category": "test",
    "img": "http://i8.pdim.gs/45/17d9fccb4ae621385bb56ad14a7c5f9f/w338/h190.jpg",
    "website": "熊猫"
};

it('make sure db is connected', function () {
    expect(_db.mongoose.connection.readyState).toBe(2);
});

it('test Live class', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var res, live, _live;

    return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _context.next = 2;
                    return _models.Live.remove({ name: "被遗忘的NaFaSh" }).exec();

                case 2:
                    _context.next = 4;
                    return _models.Live.isExistByName('被遗忘的NaFaSh');

                case 4:
                    res = _context.sent;

                    expect(res).toBe(false);
                    live = new _models.Live(mockdata);
                    _context.next = 9;
                    return live.save();

                case 9:
                    _live = _context.sent;

                    debugger;
                    _context.next = 13;
                    return _models.Live.isExistByName('被遗忘的NaFaSh');

                case 13:
                    res = _context.sent;

                    expect(res).toBe(true);
                    _context.next = 17;
                    return _models.Live.remove({ name: "被遗忘的NaFaSh" }).exec();

                case 17:
                case "end":
                    return _context.stop();
            }
        }
    }, _callee, undefined);
})));

